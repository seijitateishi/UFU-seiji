#include <stdio.h>
#include <stdlib.h>

void insertionSort(int arr[], int len)
{
  int i, key, j;
  for (i = 1; i < len; i++)
  {
    key = arr[i];
    j = i - 1;
    while (j >= 0 && arr[j] > key)
    {
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = key;
  }
}

void mergesort(int *arr, int len)
{
  if (len == 1)
  {
    return;
  }
  if (len == 2)
  {
    if (arr[0] > arr[1])
    {
      int t = arr[1];
      arr[1] = arr[0];
      arr[0] = t;
    }
  }
  if (len < 10)
  {
    insertionSort(arr, len);
    printf("insert");
    return;
  }

  int p = len / 2;
  int *arr1 = arr;
  int *arr2 = arr + p;

  mergesort(arr1, p);
  mergesort(arr2, len - p);

  int *t = malloc(sizeof(int) * len);
  int *rt = t;
  while (1)
  {
    if (arr1 < arr + p && arr2 < arr + len)
    {
      if (*arr1 <= *arr2)
      {
        *t = *arr1;
        arr1++;
      }
      else
      {
        *t = *arr2;
        arr2++;
      }
    }
    else if (arr1 < arr + p)
    {
      *t = *arr1;
      arr1++;
    }
    else if (arr2 < arr + len)
    {
      *t = *arr2;
      arr2++;
    }
    else
    {
      break;
    }
    t++;
  }

  memcpy(arr, rt, sizeof(int) * len);
  free(rt);
}

// QuickSort
void quicksort(int v[], int p, int r)
{
  if (r-p < 10){
    insertionSort(v, r-p);
    printf("insert");
    return;
  }

  if (p < r)
  {
    int j = separa(v, p, r);
    quicksort(v, p, j - 1);
    quicksort(v, j + 1, r);
  }
}

int separa(int v[], int p, int r)
{
  int c = v[r];
  int t, j = p;
  for (int k = p; k < r; ++k)
    if (v[k] <= c)
    {
      t = v[j], v[j] = v[k], v[k] = t;
      ++j;
    }
  t = v[j], v[j] = v[r], v[r] = t;
  return j;
}

int main()
{
    int n;
  scanf("%d",&n);
  int vetor[n];
  for(int i = 0; i < n; i++){
    vetor[i] = rand()%10;
  }
  int sort;
  scanf("%d",&sort);
  if(sort == 1){
    quicksort(vetor, 0, n);
    printf("quicksort");
    for (int i = 0; i < n; i++)
    {
        printf("%d", vetor[i]);
    }
  }
  if(sort == 2){
  mergesort(vetor, n);
  printf("mergesort");
  for (int i = 0; i < n; i++)
  {
    printf("%d", vetor[i]);
  }
  }
  if(sort == 3){
    insertionSort(vetor, n);
  printf("insertionsort");
  for (int i = 0; i < n; i++)
  {
    printf("%d", vetor[i]);
  }
  }
  return 0;
}
